"""
UltraTexto Pro - Ferramenta Avan√ßada de Processamento de Arquivos
Vers√£o 2.0 - Vers√£o Completa Integrada
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import os
import sys
import threading
import time
from pathlib import Path
from datetime import datetime

# Adicionar o diret√≥rio atual ao path para imports
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Imports dos m√≥dulos
from themes.dark_theme import DarkTheme
from modules.ui_components import (
    ProgressDialog, NotificationManager, FileTreeView, 
    SearchBox, StatusBar
)
from modules.exclusion_manager import ExclusionManager, ExclusionRule
from modules.file_processor import FileProcessor
from modules.directory_scanner import DirectoryScanner
from modules.export_manager import ExportManager
from modules.config_manager import ConfigManager

class UltraTextoPro:
    """Classe principal da aplica√ß√£o UltraTexto Pro - Vers√£o Completa"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window()
        self.setup_theme()
        
        # Inicializar gerenciadores
        self.config_manager = ConfigManager()
        self.exclusion_manager = ExclusionManager()
        self.export_manager = ExportManager()
        
        # Configurar vari√°veis
        self.setup_variables()
        self.setup_ui()
        self.setup_notifications()
        
        # Dados da aplica√ß√£o
        self.current_directory = None
        self.current_directory_tree = None
        self.last_processing_stats = None
        
        # Carregar configura√ß√µes
        self.load_settings()
        
        # Aplicar exclus√µes autom√°ticas baseadas na configura√ß√£o
        self.exclusion_manager.apply_auto_exclusions(self.config_manager)
        
        # Atualizar resumo das exclus√µes na interface
        self.root.after(100, self.update_exclusions_summary)
    
    def setup_window(self):
        """Configura a janela principal"""
        self.root.title("UltraTexto Pro - Processador Avan√ßado de Arquivos v2.0")
        
        # Carregar tamanho da janela das configura√ß√µes
        window_size = self.config_manager.get("ui.window_size", [1200, 800]) if hasattr(self, 'config_manager') else [1200, 800]
        self.root.geometry(f"{window_size[0]}x{window_size[1]}")
        self.root.minsize(1000, 600)
        
        # Centralizar na tela
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (window_size[0] // 2)
        y = (self.root.winfo_screenheight() // 2) - (window_size[1] // 2)
        self.root.geometry(f"{window_size[0]}x{window_size[1]}+{x}+{y}")
        
        # Protocolo de fechamento
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_theme(self):
        """Aplica o tema escuro"""
        self.style = DarkTheme.apply_theme(self.root)
    
    def setup_variables(self):
        """Inicializa as vari√°veis da aplica√ß√£o"""
        self.selected_directory = tk.StringVar()
        self.include_subdirectories = tk.BooleanVar(value=True)
        self.include_files_in_structure = tk.BooleanVar(value=True)
        self.processing_mode = tk.StringVar(value="content")
        
        # Configura√ß√µes de sa√≠da
        self.auto_open_results = tk.BooleanVar(value=True)
        self.create_backup = tk.BooleanVar(value=False)
        self.compress_output = tk.BooleanVar(value=False)
    
    def setup_notifications(self):
        """Configura o sistema de notifica√ß√µes"""
        self.notifications = NotificationManager(self.root)
    
    def setup_ui(self):
        """Configura a interface do usu√°rio"""
        # Frame principal
        main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # T√≠tulo
        title_frame = ttk.Frame(main_frame, style='Dark.TFrame')
        title_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_label = DarkTheme.create_title_label(title_frame, "UltraTexto Pro")
        title_label.pack(side=tk.LEFT)
        
        subtitle_label = DarkTheme.create_subtitle_label(
            title_frame, "Processador Avan√ßado de Arquivos v2.0"
        )
        subtitle_label.pack(side=tk.LEFT, padx=(20, 0))
        
        # Menu superior
        self.create_menu_bar(title_frame)
        
        # Notebook (abas)
        self.notebook = ttk.Notebook(main_frame, style='Dark.TNotebook')
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Criar abas
        self.create_main_tab()
        self.create_exclusions_tab()
        self.create_results_tab()
        self.create_analytics_tab()
        self.create_settings_tab()
        
        # Barra de status
        self.status_bar = StatusBar(main_frame)
        self.status_bar.pack(fill=tk.X, pady=(10, 0))
    
    def create_menu_bar(self, parent):
        """Cria barra de menu superior"""
        menu_frame = ttk.Frame(parent, style='Dark.TFrame')
        menu_frame.pack(side=tk.RIGHT)
        
        # Bot√µes de menu
        recent_button = ttk.Button(menu_frame, text="üìÅ Recentes", 
                                  style='Dark.TButton', command=self.show_recent_directories)
        recent_button.pack(side=tk.LEFT, padx=(0, 5))
        
        help_button = ttk.Button(menu_frame, text="‚ùì Ajuda", 
                                style='Dark.TButton', command=self.show_help)
        help_button.pack(side=tk.LEFT, padx=(0, 5))
        
        about_button = ttk.Button(menu_frame, text="‚Ñπ Sobre", 
                                 style='Dark.TButton', command=self.show_about)
        about_button.pack(side=tk.LEFT)
    
    def create_main_tab(self):
        """Cria a aba principal"""
        main_tab = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(main_tab, text="  üè† Principal  ")
        
        # Frame de sele√ß√£o de diret√≥rio
        dir_frame = DarkTheme.create_card_frame(main_tab, padding=15)
        dir_frame.pack(fill=tk.X, pady=(0, 15))
        
        dir_label = ttk.Label(dir_frame, text="Diret√≥rio Selecionado:", style='Dark.TLabel')
        dir_label.pack(anchor='w', pady=(0, 5))
        
        dir_input_frame = ttk.Frame(dir_frame, style='Dark.TFrame')
        dir_input_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.dir_entry = ttk.Entry(dir_input_frame, textvariable=self.selected_directory, 
                                  style='Dark.TEntry', font=('Segoe UI', 10))
        self.dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_button = ttk.Button(dir_input_frame, text="üìÇ Procurar", 
                                  style='Accent.TButton', command=self.browse_directory)
        browse_button.pack(side=tk.RIGHT, padx=(0, 5))
        
        recent_button = ttk.Button(dir_input_frame, text="üìã Recentes", 
                                  style='Dark.TButton', command=self.show_recent_directories)
        recent_button.pack(side=tk.RIGHT)
        
        # Extens√µes suportadas
        ext_label = ttk.Label(dir_frame, 
                             text=f"Extens√µes suportadas: {', '.join(sorted(self.get_supported_extensions()))}", 
                             style='Subtitle.TLabel', wraplength=800)
        ext_label.pack(anchor='w')
        
        # Frame de op√ß√µes
        options_frame = DarkTheme.create_card_frame(main_tab, padding=15)
        options_frame.pack(fill=tk.X, pady=(0, 15))
        
        options_label = ttk.Label(options_frame, text="Op√ß√µes de Processamento:", style='Dark.TLabel')
        options_label.pack(anchor='w', pady=(0, 10))
        
        # Checkboxes
        checkbox_frame = ttk.Frame(options_frame, style='Dark.TFrame')
        checkbox_frame.pack(fill=tk.X)
        
        subdir_check = ttk.Checkbutton(checkbox_frame, text="Incluir subdiret√≥rios", 
                                      variable=self.include_subdirectories, style='Dark.TCheckbutton')
        subdir_check.pack(side=tk.LEFT, padx=(0, 20))
        
        files_check = ttk.Checkbutton(checkbox_frame, text="Incluir arquivos na estrutura", 
                                     variable=self.include_files_in_structure, style='Dark.TCheckbutton')
        files_check.pack(side=tk.LEFT)
        
        # Frame de modo de processamento
        mode_frame = DarkTheme.create_card_frame(main_tab, padding=15)
        mode_frame.pack(fill=tk.X, pady=(0, 15))
        
        mode_label = ttk.Label(mode_frame, text="Modo de Processamento:", style='Dark.TLabel')
        mode_label.pack(anchor='w', pady=(0, 10))
        
        radio_frame = ttk.Frame(mode_frame, style='Dark.TFrame')
        radio_frame.pack(fill=tk.X)
        
        content_radio = ttk.Radiobutton(radio_frame, text="üìÑ Extrair conte√∫do dos arquivos", 
                                       variable=self.processing_mode, value="content", 
                                       style='Dark.TRadiobutton')
        content_radio.pack(side=tk.LEFT, padx=(0, 20))
        
        structure_radio = ttk.Radiobutton(radio_frame, text="üå≥ Gerar estrutura de diret√≥rios", 
                                         variable=self.processing_mode, value="structure", 
                                         style='Dark.TRadiobutton')
        structure_radio.pack(side=tk.LEFT)
        
        # Frame de a√ß√µes
        actions_frame = ttk.Frame(main_tab, style='Dark.TFrame')
        actions_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Bot√µes principais
        process_button = ttk.Button(actions_frame, text="üöÄ Processar", 
                                   style='Accent.TButton', command=self.start_processing)
        process_button.pack(side=tk.LEFT, padx=(0, 10))
        
        preview_button = ttk.Button(actions_frame, text="üëÅ Preview", 
                                   style='Dark.TButton', command=self.preview_processing)
        preview_button.pack(side=tk.LEFT, padx=(0, 10))
        
        clone_button = ttk.Button(actions_frame, text="üìã Clonar Pasta (com exclus√µes)",
                                 style='Dark.TButton', command=self.clone_directory_action)
        clone_button.pack(side=tk.LEFT, padx=(0, 10))
        
        scan_button = ttk.Button(actions_frame, text="üîç Escanear", 
                                style='Dark.TButton', command=self.scan_directory)
        scan_button.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_button = ttk.Button(actions_frame, text="üóë Limpar", 
                                 style='Dark.TButton', command=self.clear_all)
        clear_button.pack(side=tk.LEFT)
        
        # Informa√ß√µes do diret√≥rio
        info_frame = DarkTheme.create_card_frame(main_tab, padding=15)
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        info_label = ttk.Label(info_frame, text="Informa√ß√µes do Diret√≥rio:", style='Dark.TLabel')
        info_label.pack(anchor='w', pady=(0, 10))
        
        # Treeview para preview
        self.preview_tree = FileTreeView(info_frame, height=10)
        self.preview_tree.pack(fill=tk.BOTH, expand=True)
    
    def create_exclusions_tab(self):
        """Cria a aba de exclus√µes avan√ßadas"""
        exclusions_tab = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(exclusions_tab, text="  üö´ Exclus√µes  ")
        
        # Frame de resumo das exclus√µes
        summary_frame = DarkTheme.create_card_frame(exclusions_tab, padding=15)
        summary_frame.pack(fill=tk.X, pady=(0, 15))
        
        summary_label = ttk.Label(summary_frame, text="üìä Resumo das Exclus√µes Ativas:", style='Dark.TLabel')
        summary_label.pack(anchor='w', pady=(0, 10))
        
        # Frame para informa√ß√µes do resumo
        summary_info_frame = ttk.Frame(summary_frame, style='Dark.TFrame')
        summary_info_frame.pack(fill=tk.X)
        
        # Labels para mostrar informa√ß√µes
        self.profile_info_label = ttk.Label(summary_info_frame, text="Perfil: Padr√£o", style='Dark.TLabel')
        self.profile_info_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.rules_info_label = ttk.Label(summary_info_frame, text="Regras: 0 ativas", style='Dark.TLabel')
        self.rules_info_label.pack(side=tk.LEFT, padx=(0, 20))
        
        self.common_exclusions_label = ttk.Label(summary_info_frame, text="Pastas exclu√≠das: node_modules, .venv, venv...", style='Dark.TLabel')
        self.common_exclusions_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # Bot√£o para atualizar resumo
        refresh_summary_button = ttk.Button(summary_info_frame, text="üîÑ Atualizar", 
                                          style='Dark.TButton', command=self.update_exclusions_summary)
        refresh_summary_button.pack(side=tk.RIGHT)
        
        # Frame de perfis
        profiles_frame = DarkTheme.create_card_frame(exclusions_tab, padding=15)
        profiles_frame.pack(fill=tk.X, pady=(0, 15))
        
        profiles_label = ttk.Label(profiles_frame, text="Perfis de Exclus√£o:", style='Dark.TLabel')
        profiles_label.pack(anchor='w', pady=(0, 10))
        
        profile_control_frame = ttk.Frame(profiles_frame, style='Dark.TFrame')
        profile_control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Combobox de perfis
        self.profile_var = tk.StringVar()
        self.profile_combo = ttk.Combobox(profile_control_frame, textvariable=self.profile_var,
                                         style='Dark.TCombobox', state='readonly')
        self.profile_combo.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        self.profile_combo.bind('<<ComboboxSelected>>', self.on_profile_changed)
        
        # Bot√µes de perfil
        new_profile_button = ttk.Button(profile_control_frame, text="‚ûï Novo", 
                                       style='Dark.TButton', command=self.create_new_profile)
        new_profile_button.pack(side=tk.LEFT, padx=(0, 5))
        
        save_profile_button = ttk.Button(profile_control_frame, text="üíæ Salvar", 
                                        style='Dark.TButton', command=self.save_current_profile)
        save_profile_button.pack(side=tk.LEFT, padx=(0, 5))
        
        delete_profile_button = ttk.Button(profile_control_frame, text="üóë Excluir", 
                                          style='Dark.TButton', command=self.delete_current_profile)
        delete_profile_button.pack(side=tk.LEFT)
        
        # Frame de filtros
        filters_frame = DarkTheme.create_card_frame(exclusions_tab, padding=15)
        filters_frame.pack(fill=tk.X, pady=(0, 15))
        
        filters_label = ttk.Label(filters_frame, text="Adicionar Filtros:", style='Dark.TLabel')
        filters_label.pack(anchor='w', pady=(0, 10))
        
        # Bot√µes de filtro
        filter_buttons_frame = ttk.Frame(filters_frame, style='Dark.TFrame')
        filter_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        add_file_button = ttk.Button(filter_buttons_frame, text="üìÑ Arquivo", 
                                    style='Dark.TButton', command=self.add_file_exclusion)
        add_file_button.pack(side=tk.LEFT, padx=(0, 10))
        
        add_folder_button = ttk.Button(filter_buttons_frame, text="üìÅ Pasta", 
                                      style='Dark.TButton', command=self.add_folder_exclusion)
        add_folder_button.pack(side=tk.LEFT, padx=(0, 10))
        
        add_extension_button = ttk.Button(filter_buttons_frame, text="üè∑ Extens√£o", 
                                         style='Dark.TButton', command=self.add_extension_exclusion)
        add_extension_button.pack(side=tk.LEFT, padx=(0, 10))
        
        add_regex_button = ttk.Button(filter_buttons_frame, text="üîç Regex", 
                                     style='Dark.TButton', command=self.add_regex_exclusion)
        add_regex_button.pack(side=tk.LEFT, padx=(0, 10))
        
        add_size_button = ttk.Button(filter_buttons_frame, text="üìè Tamanho", 
                                    style='Dark.TButton', command=self.add_size_exclusion)
        add_size_button.pack(side=tk.LEFT, padx=(0, 10))
        
        preview_button = ttk.Button(filter_buttons_frame, text="üëÅ Preview", 
                                   style='Accent.TButton', command=self.preview_exclusions)
        preview_button.pack(side=tk.RIGHT)
        
        # Lista de exclus√µes
        exclusions_list_frame = DarkTheme.create_card_frame(exclusions_tab, padding=15)
        exclusions_list_frame.pack(fill=tk.BOTH, expand=True)
        
        exclusions_label = ttk.Label(exclusions_list_frame, text="Regras de Exclus√£o:", style='Dark.TLabel')
        exclusions_label.pack(anchor='w', pady=(0, 10))
        
        # Treeview para exclus√µes
        self.exclusions_tree = FileTreeView(exclusions_list_frame, 
                                           columns=('type', 'pattern', 'enabled'), height=15)
        self.exclusions_tree.tree.heading('#0', text='Descri√ß√£o')
        self.exclusions_tree.tree.heading('type', text='Tipo')
        self.exclusions_tree.tree.heading('pattern', text='Padr√£o')
        self.exclusions_tree.tree.heading('enabled', text='Ativo')

        # Configurar larguras das colunas
        self.exclusions_tree.tree.column('#0', width=250, minwidth=200)
        self.exclusions_tree.tree.column('type', width=100, minwidth=80)
        self.exclusions_tree.tree.column('pattern', width=200, minwidth=150)
        self.exclusions_tree.tree.column('enabled', width=80, minwidth=60)
                
        self.exclusions_tree.pack(fill=tk.BOTH, expand=True)
                
        # Bind para a√ß√µes
        self.exclusions_tree.tree.bind('<Delete>', self.remove_selected_exclusion)
        self.exclusions_tree.tree.bind('<Double-1>', self.edit_exclusion)
        
        # Atualizar lista de perfis
        self.update_profiles_list()
    
    def create_results_tab(self):
        """Cria a aba de resultados"""
        results_tab = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(results_tab, text="  üìä Resultados  ")
        
        # Busca
        search_frame = ttk.Frame(results_tab, style='Dark.TFrame')
        search_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.search_box = SearchBox(search_frame, on_search=self.search_results, 
                                   on_clear=self.clear_search)
        self.search_box.pack(fill=tk.X)
        
        # Lista de arquivos gerados
        files_frame = DarkTheme.create_card_frame(results_tab, padding=15)
        files_frame.pack(fill=tk.BOTH, expand=True)
        
        files_label = ttk.Label(files_frame, text="Arquivos Gerados:", style='Dark.TLabel')
        files_label.pack(anchor='w', pady=(0, 10))
        
        # Treeview para arquivos
        self.results_tree = FileTreeView(files_frame, height=15)
        self.results_tree.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Bot√µes de a√ß√£o
        results_buttons_frame = ttk.Frame(files_frame, style='Dark.TFrame')
        results_buttons_frame.pack(fill=tk.X)
        
        open_button = ttk.Button(results_buttons_frame, text="üìÇ Abrir", 
                                style='Accent.TButton', command=self.open_selected_file)
        open_button.pack(side=tk.LEFT, padx=(0, 10))
        
        view_button = ttk.Button(results_buttons_frame, text="üëÅ Visualizar", 
                                style='Dark.TButton', command=self.view_selected_file)
        view_button.pack(side=tk.LEFT, padx=(0, 10))
        
        export_button = ttk.Button(results_buttons_frame, text="üì§ Exportar", 
                                  style='Dark.TButton', command=self.export_results)
        export_button.pack(side=tk.LEFT, padx=(0, 10))
        
        delete_button = ttk.Button(results_buttons_frame, text="üóë Excluir", 
                                  style='Dark.TButton', command=self.delete_selected_file)
        delete_button.pack(side=tk.LEFT, padx=(0, 10))
        
        folder_button = ttk.Button(results_buttons_frame, text="üìÅ Pasta", 
                                  style='Dark.TButton', command=self.open_output_folder)
        folder_button.pack(side=tk.RIGHT)
        
        refresh_button = ttk.Button(results_buttons_frame, text="üîÑ Atualizar", 
                                   style='Dark.TButton', command=self.refresh_results)
        refresh_button.pack(side=tk.RIGHT, padx=(0, 10))
    
    def create_analytics_tab(self):
        """Cria a aba de an√°lises"""
        analytics_tab = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(analytics_tab, text="  üìà An√°lises  ")
        
        # Estat√≠sticas gerais
        stats_frame = DarkTheme.create_card_frame(analytics_tab, padding=15)
        stats_frame.pack(fill=tk.X, pady=(0, 15))
        
        stats_label = ttk.Label(stats_frame, text="Estat√≠sticas do √öltimo Processamento:", style='Dark.TLabel')
        stats_label.pack(anchor='w', pady=(0, 10))
        
        # Grid de estat√≠sticas
        self.stats_frame = ttk.Frame(stats_frame, style='Dark.TFrame')
        self.stats_frame.pack(fill=tk.X)
        
        # An√°lises avan√ßadas
        analysis_frame = DarkTheme.create_card_frame(analytics_tab, padding=15)
        analysis_frame.pack(fill=tk.BOTH, expand=True)
        
        analysis_label = ttk.Label(analysis_frame, text="An√°lises Avan√ßadas:", style='Dark.TLabel')
        analysis_label.pack(anchor='w', pady=(0, 10))
        
        # Bot√µes de an√°lise
        analysis_buttons_frame = ttk.Frame(analysis_frame, style='Dark.TFrame')
        analysis_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        largest_files_button = ttk.Button(analysis_buttons_frame, text="üìä Maiores Arquivos", 
                                         style='Dark.TButton', command=self.show_largest_files)
        largest_files_button.pack(side=tk.LEFT, padx=(0, 10))
        
        extension_dist_button = ttk.Button(analysis_buttons_frame, text="üìà Distribui√ß√£o de Extens√µes", 
                                          style='Dark.TButton', command=self.show_extension_distribution)
        extension_dist_button.pack(side=tk.LEFT, padx=(0, 10))
        
        duplicates_button = ttk.Button(analysis_buttons_frame, text="üîç Nomes Duplicados", 
                                      style='Dark.TButton', command=self.show_duplicate_names)
        duplicates_button.pack(side=tk.LEFT, padx=(0, 10))
        
        empty_dirs_button = ttk.Button(analysis_buttons_frame, text="üìÅ Pastas Vazias", 
                                      style='Dark.TButton', command=self.show_empty_directories)
        empty_dirs_button.pack(side=tk.LEFT)
        
        # √Årea de resultados de an√°lise
        self.analysis_tree = FileTreeView(analysis_frame, height=15)
        self.analysis_tree.pack(fill=tk.BOTH, expand=True)
    
    def create_settings_tab(self):
        """Cria a aba de configura√ß√µes"""
        settings_tab = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(settings_tab, text="  ‚öô Configura√ß√µes  ")
        
        # Notebook interno para configura√ß√µes
        settings_notebook = ttk.Notebook(settings_tab, style='Dark.TNotebook')
        settings_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Aba de processamento
        processing_tab = ttk.Frame(settings_notebook, style='Dark.TFrame')
        settings_notebook.add(processing_tab, text="Processamento")
        
        self.create_processing_settings(processing_tab)
        
        # Aba de interface
        ui_tab = ttk.Frame(settings_notebook, style='Dark.TFrame')
        settings_notebook.add(ui_tab, text="Interface")
        
        self.create_ui_settings(ui_tab)
        
        # Aba de sa√≠da
        output_tab = ttk.Frame(settings_notebook, style='Dark.TFrame')
        settings_notebook.add(output_tab, text="Sa√≠da")
        
        self.create_output_settings(output_tab)
        
        # Aba avan√ßada
        advanced_tab = ttk.Frame(settings_notebook, style='Dark.TFrame')
        settings_notebook.add(advanced_tab, text="Avan√ßado")
        
        self.create_advanced_settings(advanced_tab)
    
    def create_processing_settings(self, parent):
        """Cria configura√ß√µes de processamento"""
        # Extens√µes
        ext_frame = DarkTheme.create_card_frame(parent, padding=15)
        ext_frame.pack(fill=tk.X, pady=(0, 15))
        
        ext_label = ttk.Label(ext_frame, text="Extens√µes Suportadas:", style='Dark.TLabel')
        ext_label.pack(anchor='w', pady=(0, 10))
        
        ext_list_frame = ttk.Frame(ext_frame, style='Dark.TFrame')
        ext_list_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.extensions_var = tk.StringVar()
        ext_entry = ttk.Entry(ext_list_frame, textvariable=self.extensions_var, 
                             style='Dark.TEntry', font=('Segoe UI', 10))
        ext_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        update_ext_button = ttk.Button(ext_list_frame, text="Atualizar", 
                                      style='Accent.TButton', command=self.update_extensions)
        update_ext_button.pack(side=tk.RIGHT)
        
        # Configura√ß√µes de performance
        perf_frame = DarkTheme.create_card_frame(parent, padding=15)
        perf_frame.pack(fill=tk.X, pady=(0, 15))
        
        perf_label = ttk.Label(perf_frame, text="Performance:", style='Dark.TLabel')
        perf_label.pack(anchor='w', pady=(0, 10))
        
        # Max workers
        workers_frame = ttk.Frame(perf_frame, style='Dark.TFrame')
        workers_frame.pack(fill=tk.X, pady=(0, 5))
        
        workers_label = ttk.Label(workers_frame, text="Threads de processamento:", style='Dark.TLabel')
        workers_label.pack(side=tk.LEFT)
        
        self.max_workers_var = tk.IntVar()
        workers_spinbox = ttk.Spinbox(workers_frame, from_=1, to=16, textvariable=self.max_workers_var,
                                     style='Dark.TEntry', width=10)
        workers_spinbox.pack(side=tk.RIGHT)
        
        # Max file size
        size_frame = ttk.Frame(perf_frame, style='Dark.TFrame')
        size_frame.pack(fill=tk.X, pady=(0, 5))
        
        size_label = ttk.Label(size_frame, text="Tamanho m√°ximo de arquivo (MB):", style='Dark.TLabel')
        size_label.pack(side=tk.LEFT)
        
        self.max_file_size_var = tk.IntVar()
        size_spinbox = ttk.Spinbox(size_frame, from_=1, to=1000, textvariable=self.max_file_size_var,
                                  style='Dark.TEntry', width=10)
        size_spinbox.pack(side=tk.RIGHT)
    
    def create_ui_settings(self, parent):
        """Cria configura√ß√µes de interface"""
        # Apar√™ncia
        appearance_frame = DarkTheme.create_card_frame(parent, padding=15)
        appearance_frame.pack(fill=tk.X, pady=(0, 15))
        
        appearance_label = ttk.Label(appearance_frame, text="Apar√™ncia:", style='Dark.TLabel')
        appearance_label.pack(anchor='w', pady=(0, 10))
        
        # Checkboxes de interface
        self.show_tooltips_var = tk.BooleanVar()
        tooltips_check = ttk.Checkbutton(appearance_frame, text="Mostrar tooltips", 
                                        variable=self.show_tooltips_var, style='Dark.TCheckbutton')
        tooltips_check.pack(anchor='w', pady=2)
        
        self.animation_enabled_var = tk.BooleanVar()
        animation_check = ttk.Checkbutton(appearance_frame, text="Habilitar anima√ß√µes", 
                                         variable=self.animation_enabled_var, style='Dark.TCheckbutton')
        animation_check.pack(anchor='w', pady=2)
        
        self.auto_save_layout_var = tk.BooleanVar()
        layout_check = ttk.Checkbutton(appearance_frame, text="Salvar layout automaticamente", 
                                      variable=self.auto_save_layout_var, style='Dark.TCheckbutton')
        layout_check.pack(anchor='w', pady=2)
    
    def create_output_settings(self, parent):
        """Cria configura√ß√µes de sa√≠da"""
        # Configura√ß√µes de sa√≠da
        output_frame = DarkTheme.create_card_frame(parent, padding=15)
        output_frame.pack(fill=tk.X, pady=(0, 15))
        
        output_label = ttk.Label(output_frame, text="Configura√ß√µes de Sa√≠da:", style='Dark.TLabel')
        output_label.pack(anchor='w', pady=(0, 10))
        
        # Diret√≥rio de sa√≠da
        dir_frame = ttk.Frame(output_frame, style='Dark.TFrame')
        dir_frame.pack(fill=tk.X, pady=(0, 10))
        
        dir_label = ttk.Label(dir_frame, text="Diret√≥rio de sa√≠da:", style='Dark.TLabel')
        dir_label.pack(anchor='w', pady=(0, 5))
        
        dir_input_frame = ttk.Frame(dir_frame, style='Dark.TFrame')
        dir_input_frame.pack(fill=tk.X)
        
        self.output_dir_var = tk.StringVar()
        dir_entry = ttk.Entry(dir_input_frame, textvariable=self.output_dir_var, 
                             style='Dark.TEntry')
        dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        browse_output_button = ttk.Button(dir_input_frame, text="Procurar", 
                                         style='Dark.TButton', command=self.browse_output_directory)
        browse_output_button.pack(side=tk.RIGHT)
        
        # Op√ß√µes de sa√≠da
        auto_open_check = ttk.Checkbutton(output_frame, text="Abrir resultados automaticamente", 
                                         variable=self.auto_open_results, style='Dark.TCheckbutton')
        auto_open_check.pack(anchor='w', pady=2)
        
        backup_check = ttk.Checkbutton(output_frame, text="Criar backup dos arquivos existentes", 
                                      variable=self.create_backup, style='Dark.TCheckbutton')
        backup_check.pack(anchor='w', pady=2)
        
        compress_check = ttk.Checkbutton(output_frame, text="Comprimir arquivos de sa√≠da", 
                                        variable=self.compress_output, style='Dark.TCheckbutton')
        compress_check.pack(anchor='w', pady=2)
    
    def create_advanced_settings(self, parent):
        """Cria configura√ß√µes avan√ßadas"""
        # Configura√ß√µes avan√ßadas
        advanced_frame = DarkTheme.create_card_frame(parent, padding=15)
        advanced_frame.pack(fill=tk.X, pady=(0, 15))
        
        advanced_label = ttk.Label(advanced_frame, text="Configura√ß√µes Avan√ßadas:", style='Dark.TLabel')
        advanced_label.pack(anchor='w', pady=(0, 10))
        
        # Bot√µes de a√ß√£o
        buttons_frame = ttk.Frame(advanced_frame, style='Dark.TFrame')
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        export_config_button = ttk.Button(buttons_frame, text="üì§ Exportar Configura√ß√µes", 
                                         style='Dark.TButton', command=self.export_config)
        export_config_button.pack(side=tk.LEFT, padx=(0, 10))
        
        import_config_button = ttk.Button(buttons_frame, text="üì• Importar Configura√ß√µes", 
                                         style='Dark.TButton', command=self.import_config)
        import_config_button.pack(side=tk.LEFT, padx=(0, 10))
        
        reset_button = ttk.Button(buttons_frame, text="üîÑ Restaurar Padr√µes", 
                                 style='Dark.TButton', command=self.reset_to_defaults)
        reset_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cleanup_button = ttk.Button(buttons_frame, text="üßπ Limpar Cache", 
                                   style='Dark.TButton', command=self.cleanup_cache)
        cleanup_button.pack(side=tk.RIGHT)
        
        # Informa√ß√µes do sistema
        info_frame = DarkTheme.create_card_frame(parent, padding=15)
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        info_label = ttk.Label(info_frame, text="Informa√ß√µes do Sistema:", style='Dark.TLabel')
        info_label.pack(anchor='w', pady=(0, 10))
        
        # Texto de informa√ß√µes
        info_text = f"""UltraTexto Pro v2.0

Desenvolvido com Python e tkinter
Tema escuro moderno integrado

Funcionalidades:
‚Ä¢ Processamento avan√ßado de arquivos
‚Ä¢ Sistema de exclus√µes com perfis
‚Ä¢ Exporta√ß√£o em m√∫ltiplos formatos
‚Ä¢ An√°lises estat√≠sticas detalhadas
‚Ä¢ Interface moderna e intuitiva

Configura√ß√µes salvas em: {self.config_manager.config_dir}
Diret√≥rio de sa√≠da: {self.config_manager.get_output_directory()}"""
        
        info_content = ttk.Label(info_frame, text=info_text, style='Subtitle.TLabel', 
                                justify=tk.LEFT, wraplength=800)
        info_content.pack(anchor='w')
    
    # M√©todos de funcionalidade principal
    def load_settings(self):
        """Carrega configura√ß√µes salvas"""
        # Carregar extens√µes suportadas
        extensions = self.config_manager.get_supported_extensions()
        self.extensions_var.set(' '.join(extensions))
        
        # Carregar outras configura√ß√µes
        self.include_subdirectories.set(self.config_manager.get("processing.include_subdirectories", True))
        self.include_files_in_structure.set(self.config_manager.get("processing.include_files_in_structure", True))
        self.processing_mode.set(self.config_manager.get("processing.processing_mode", "content"))
        
        # Configura√ß√µes de sa√≠da
        self.auto_open_results.set(self.config_manager.get("output.auto_open_results", True))
        self.create_backup.set(self.config_manager.get("output.create_backup", False))
        self.compress_output.set(self.config_manager.get("output.compress_output", False))
        self.output_dir_var.set(str(self.config_manager.get_output_directory()))
        
        # Configura√ß√µes de performance
        self.max_workers_var.set(self.config_manager.get("processing.max_workers", 4))
        self.max_file_size_var.set(self.config_manager.get("processing.max_file_size_mb", 10))
        
        # Configura√ß√µes de interface
        self.show_tooltips_var.set(self.config_manager.get("ui.show_tooltips", True))
        self.animation_enabled_var.set(self.config_manager.get("ui.animation_enabled", True))
        self.auto_save_layout_var.set(self.config_manager.get("ui.auto_save_layout", True))
        
        # Carregar √∫ltimo diret√≥rio se configurado
        if self.config_manager.get("history.auto_load_last_directory", False):
            recent_dirs = self.config_manager.get_recent_directories()
            if recent_dirs:
                self.selected_directory.set(recent_dirs[0])
                self.current_directory = recent_dirs[0]
    
    def save_settings(self):
        """Salva configura√ß√µes atuais"""
        # Salvar extens√µes
        extensions_text = self.extensions_var.get()
        extensions = [ext.strip() for ext in extensions_text.split() if ext.strip()]
        self.config_manager.set_supported_extensions(extensions)
        
        # Salvar outras configura√ß√µes
        self.config_manager.set("processing.include_subdirectories", self.include_subdirectories.get())
        self.config_manager.set("processing.include_files_in_structure", self.include_files_in_structure.get())
        self.config_manager.set("processing.processing_mode", self.processing_mode.get())
        
        # Configura√ß√µes de sa√≠da
        self.config_manager.set("output.auto_open_results", self.auto_open_results.get())
        self.config_manager.set("output.create_backup", self.create_backup.get())
        self.config_manager.set("output.compress_output", self.compress_output.get())
        self.config_manager.set("output.output_directory", self.output_dir_var.get())
        
        # Configura√ß√µes de performance
        self.config_manager.set("processing.max_workers", self.max_workers_var.get())
        self.config_manager.set("processing.max_file_size_mb", self.max_file_size_var.get())
        
        # Configura√ß√µes de interface
        self.config_manager.set("ui.show_tooltips", self.show_tooltips_var.get())
        self.config_manager.set("ui.animation_enabled", self.animation_enabled_var.get())
        self.config_manager.set("ui.auto_save_layout", self.auto_save_layout_var.get())
        
        # Salvar tamanho da janela
        geometry = self.root.geometry()
        size_part = geometry.split('+')[0]
        width, height = map(int, size_part.split('x'))
        self.config_manager.set("ui.window_size", [width, height])
        
        self.config_manager.save_config()
    
    def get_supported_extensions(self):
        """Retorna extens√µes suportadas"""
        return self.config_manager.get_supported_extensions()
    
    def browse_directory(self):
        """Abre dialog para selecionar diret√≥rio"""
        initial_dir = self.current_directory or os.path.expanduser("~")
        directory = filedialog.askdirectory(title="Selecione o diret√≥rio para processar",
                                           initialdir=initial_dir)
        if directory:
            self.selected_directory.set(directory)
            self.current_directory = directory
            self.config_manager.add_recent_directory(directory)
            self.update_directory_info()
            self.status_bar.set_status(f"Diret√≥rio selecionado: {os.path.basename(directory)}")
    
    def browse_output_directory(self):
        """Abre dialog para selecionar diret√≥rio de sa√≠da"""
        directory = filedialog.askdirectory(title="Selecione o diret√≥rio de sa√≠da")
        if directory:
            self.output_dir_var.set(directory)
    
    def show_recent_directories(self):
        """Mostra lista de diret√≥rios recentes"""
        recent_dirs = self.config_manager.get_recent_directories()
        if not recent_dirs:
            self.notifications.show_info("Nenhum diret√≥rio recente encontrado")
            return
        
        # Criar janela de sele√ß√£o
        dialog = tk.Toplevel(self.root)
        dialog.title("Diret√≥rios Recentes")
        dialog.geometry("600x400")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (dialog.winfo_screenheight() // 2) - (400 // 2)
        dialog.geometry(f"600x400+{x}+{y}")
        
        # Lista de diret√≥rios
        frame = ttk.Frame(dialog, style='Dark.TFrame', padding=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        label = ttk.Label(frame, text="Selecione um diret√≥rio recente:", style='Dark.TLabel')
        label.pack(anchor='w', pady=(0, 10))
        
        # Listbox
        listbox = tk.Listbox(frame, bg=DarkTheme.COLORS['bg_secondary'], 
                            fg=DarkTheme.COLORS['text_primary'],
                            selectbackground=DarkTheme.COLORS['bg_selected'],
                            font=('Segoe UI', 10))
        listbox.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        for directory in recent_dirs:
            listbox.insert(tk.END, directory)
        
        # Bot√µes
        buttons_frame = ttk.Frame(frame, style='Dark.TFrame')
        buttons_frame.pack(fill=tk.X)
        
        def select_directory():
            selection = listbox.curselection()
            if selection:
                selected_dir = recent_dirs[selection[0]]
                self.selected_directory.set(selected_dir)
                self.current_directory = selected_dir
                self.update_directory_info()
                dialog.destroy()
        
        select_button = ttk.Button(buttons_frame, text="Selecionar", 
                                  style='Accent.TButton', command=select_directory)
        select_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cancel_button = ttk.Button(buttons_frame, text="Cancelar", 
                                  style='Dark.TButton', command=dialog.destroy)
        cancel_button.pack(side=tk.LEFT)
        
        # Bind duplo clique
        listbox.bind('<Double-1>', lambda e: select_directory())
    
    def update_directory_info(self):
        """Atualiza as informa√ß√µes do diret√≥rio selecionado"""
        if not self.current_directory:
            return
        
        # Limpar √°rvore
        for item in self.preview_tree.get_children():
            self.preview_tree.delete(item)
        
        try:
            # Usar scanner para obter informa√ß√µes
            scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
            
            # Escanear apenas o primeiro n√≠vel para preview r√°pido
            root_node = scanner.scan_directory(self.current_directory, include_subdirectories=False)
            
            # Adicionar itens √† √°rvore
            for child in root_node.children[:20]:  # Limitar a 20 itens
                icon = "üìÅ" if child.is_directory else ("üìÑ‚úÖ" if child.is_supported else "üìÑ")
                if child.is_excluded:
                    icon += "‚ùå"
                
                size_str = self._format_file_size(child.size) if not child.is_directory else ""
                item_type = "Pasta" if child.is_directory else "Arquivo"
                
                self.preview_tree.insert('', 'end', text=f"{icon} {child.name}", 
                                       values=(size_str, item_type, ''))
            
            if len(root_node.children) > 20:
                self.preview_tree.insert('', 'end', text="... (mais itens)", 
                                       values=('', '', ''))
            
            # Atualizar estat√≠sticas
            stats = scanner.get_statistics()
            info_text = (f"Pastas: {stats['total_directories']} | "
                        f"Arquivos: {stats['total_files']} | "
                        f"Suportados: {len([c for c in root_node.children if not c.is_directory and c.is_supported])}")
            self.status_bar.set_info(info_text)
            
        except Exception as e:
            self.notifications.show_error(f"Erro ao analisar diret√≥rio: {str(e)}")
    
    def scan_directory(self):
        """Escaneia diret√≥rio completo"""
        if not self.current_directory:
            self.notifications.show_warning("Selecione um diret√≥rio primeiro!")
            return
        
        # Executar escaneamento em thread
        def scan_thread():
            progress = ProgressDialog(self.root, "Escaneando Diret√≥rio", 
                                     "Analisando estrutura completa...")
            
            try:
                scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
                scanner.set_progress_callback(lambda c, t, m: progress.update_status(m))
                
                self.current_directory_tree = scanner.scan_directory(
                    self.current_directory, 
                    self.include_subdirectories.get()
                )
                
                progress.close()
                self.root.after(0, lambda: self.notifications.show_success("Escaneamento conclu√≠do!"))
                self.root.after(0, self.update_scan_results)
                
            except Exception as e:
                progress.close()
                self.root.after(0, lambda: self.notifications.show_error(f"Erro no escaneamento: {str(e)}"))
        
        thread = threading.Thread(target=scan_thread, daemon=True)
        thread.start()
    
    def update_scan_results(self):
        """Atualiza resultados do escaneamento"""
        if not self.current_directory_tree:
            return
        
        # Limpar √°rvore
        for item in self.preview_tree.get_children():
            self.preview_tree.delete(item)
        
        # Gerar texto da √°rvore
        scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
        tree_text = scanner.generate_tree_text(self.current_directory_tree, max_items=100)
        
        # Adicionar linhas √† √°rvore
        for line in tree_text.split('\n')[:100]:
            if line.strip():
                self.preview_tree.insert('', 'end', text=line, values=('', '', ''))
    
    def start_processing(self):
        """Inicia o processamento em thread separada"""
        if not self.current_directory:
            self.notifications.show_warning("Selecione um diret√≥rio primeiro!")
            return
        
        # Salvar configura√ß√µes antes de processar
        self.save_settings()
        
        # Iniciar processamento em thread
        thread = threading.Thread(target=self.process_files, daemon=True)
        thread.start()
    
    def process_files(self):
        """Processa os arquivos (executado em thread separada)"""
        progress = ProgressDialog(self.root, "Processando Arquivos", 
                                 "Preparando processamento...")
        
        try:
            # Criar processador
            processor = FileProcessor(set(self.get_supported_extensions()), self.exclusion_manager)
            processor.set_progress_callback(lambda c, t, m: progress.update_status(m))
            
            # Determinar nome do arquivo de sa√≠da
            if self.processing_mode.get() == "content":
                template = self.config_manager.get("output.filename_template", "arquivo_{counter}")
                output_path = self.config_manager.get_next_filename(template, ".txt")
            else:
                template = self.config_manager.get("output.structure_filename_template", "estrutura_{counter}")
                output_path = self.config_manager.get_next_filename(template, ".txt")
            
            progress.update_message("Processando arquivos...")
            
            # Processar baseado no modo
            if self.processing_mode.get() == "content":
                result_path = processor.process_files_content(
                    self.current_directory,
                    output_path,
                    self.include_subdirectories.get()
                )
            else:
                result_path = processor.generate_directory_structure(
                    self.current_directory,
                    output_path,
                    self.include_subdirectories.get(),
                    self.include_files_in_structure.get()
                )
            
            # Salvar estat√≠sticas
            self.last_processing_stats = processor.stats
            
            # Adicionar ao hist√≥rico
            self.config_manager.add_processing_entry({
                "directory": self.current_directory,
                "mode": self.processing_mode.get(),
                "output_file": result_path,
                "stats": processor.stats.to_dict()
            })
            
            # Adicionar arquivo aos recentes
            self.config_manager.add_recent_file(result_path)
            
            progress.close()
            
            # Notificar sucesso
            self.root.after(0, lambda: self.notifications.show_success("Processamento conclu√≠do!"))
            self.root.after(0, self.refresh_results)
            self.root.after(0, self.update_statistics)
            
            # Abrir resultado se configurado
            if self.auto_open_results.get():
                self.root.after(0, lambda: self.open_file(result_path))
                
        except Exception as e:
            progress.close()
            self.root.after(0, lambda: self.notifications.show_error(f"Erro no processamento: {str(e)}"))
    
    def preview_processing(self):
        """Mostra preview do que ser√° processado"""
        if not self.current_directory:
            self.notifications.show_warning("Selecione um diret√≥rio primeiro!")
            return
        
        # Executar preview em thread
        def preview_thread():
            try:
                preview_data = self.exclusion_manager.get_exclusion_preview(self.current_directory, max_items=500)
                self.root.after(0, lambda: self.show_preview_dialog(preview_data))
            except Exception as e:
                self.root.after(0, lambda: self.notifications.show_error(f"Erro no preview: {str(e)}"))
        
        thread = threading.Thread(target=preview_thread, daemon=True)
        thread.start()
    
    def show_preview_dialog(self, preview_data):
        """Mostra dialog com preview dos arquivos"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Preview do Processamento")
        dialog.geometry("800x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (800 // 2)
        y = (dialog.winfo_screenheight() // 2) - (600 // 2)
        dialog.geometry(f"800x600+{x}+{y}")
        
        # Frame principal
        main_frame = ttk.Frame(dialog, style='Dark.TFrame', padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="Preview do Processamento", style='Title.TLabel')
        title_label.pack(anchor='w', pady=(0, 10))
        
        # Estat√≠sticas
        stats_text = (f"Total verificado: {preview_data['total_checked']} itens\n"
                     f"Ser√£o inclu√≠dos: {len(preview_data['included'])} itens\n"
                     f"Ser√£o exclu√≠dos: {len(preview_data['excluded'])} itens")
        
        stats_label = ttk.Label(main_frame, text=stats_text, style='Dark.TLabel')
        stats_label.pack(anchor='w', pady=(0, 10))
        
        # Notebook para inclu√≠dos/exclu√≠dos
        notebook = ttk.Notebook(main_frame, style='Dark.TNotebook')
        notebook.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Aba de inclu√≠dos
        included_frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(included_frame, text=f"Inclu√≠dos ({len(preview_data['included'])})")
        
        included_text = tk.Text(included_frame, bg=DarkTheme.COLORS['bg_secondary'],
                               fg=DarkTheme.COLORS['text_primary'], font=('Courier New', 9))
        included_text.pack(fill=tk.BOTH, expand=True)
        included_text.insert('1.0', '\n'.join(preview_data['included']))
        included_text.config(state='disabled')
        
        # Aba de exclu√≠dos
        excluded_frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(excluded_frame, text=f"Exclu√≠dos ({len(preview_data['excluded'])})")
        
        excluded_text = tk.Text(excluded_frame, bg=DarkTheme.COLORS['bg_secondary'],
                               fg=DarkTheme.COLORS['text_primary'], font=('Courier New', 9))
        excluded_text.pack(fill=tk.BOTH, expand=True)
        excluded_text.insert('1.0', '\n'.join(preview_data['excluded']))
        excluded_text.config(state='disabled')
        
        # Bot√£o fechar
        close_button = ttk.Button(main_frame, text="Fechar", 
                                 style='Accent.TButton', command=dialog.destroy)
        close_button.pack()
    
    def clear_all(self):
        """Limpa todas as configura√ß√µes"""
        self.selected_directory.set("")
        self.current_directory = None
        self.current_directory_tree = None
        
        # Limpar √°rvores
        for item in self.preview_tree.get_children():
            self.preview_tree.delete(item)
        
        self.status_bar.clear()
        self.notifications.show_info("Configura√ß√µes limpas")
    
    # M√©todos de exclus√µes
    def update_profiles_list(self):
        """Atualiza lista de perfis de exclus√£o"""
        profiles = list(self.exclusion_manager.profiles.keys())
        self.profile_combo['values'] = profiles
        
        if self.exclusion_manager.current_profile:
            self.profile_var.set(self.exclusion_manager.current_profile.name)
        
        self.update_exclusions_tree()
    
    def on_profile_changed(self, event=None):
        """Chamado quando perfil √© alterado"""
        profile_name = self.profile_var.get()
        if profile_name:
            self.exclusion_manager.set_current_profile(profile_name)
            self.update_exclusions_tree()
    
    def create_new_profile(self):
        """Cria novo perfil de exclus√£o"""
        name = simpledialog.askstring("Novo Perfil", "Nome do perfil:")
        if name:
            description = simpledialog.askstring("Novo Perfil", "Descri√ß√£o (opcional):") or ""
            try:
                self.exclusion_manager.create_profile(name, description)
                self.update_profiles_list()
                self.profile_var.set(name)
                self.exclusion_manager.set_current_profile(name)
                self.notifications.show_success(f"Perfil '{name}' criado!")
            except ValueError as e:
                self.notifications.show_error(str(e))
    
    def save_current_profile(self):
        """Salva perfil atual"""
        self.exclusion_manager.save_profiles()
        self.notifications.show_success("Perfil salvo!")
    
    def delete_current_profile(self):
        """Exclui perfil atual"""
        profile_name = self.profile_var.get()
        if profile_name:
            if messagebox.askyesno("Confirmar", f"Excluir perfil '{profile_name}'?"):
                try:
                    self.exclusion_manager.delete_profile(profile_name)
                    self.update_profiles_list()
                    self.notifications.show_success(f"Perfil '{profile_name}' exclu√≠do!")
                except ValueError as e:
                    self.notifications.show_error(str(e))
    
    def add_file_exclusion(self):
        """Adiciona exclus√£o de arquivo"""
        file_path = filedialog.askopenfilename(title="Selecione arquivo para excluir")
        if file_path:
            rule = ExclusionRule('file', file_path, f"Arquivo: {os.path.basename(file_path)}")
            self.exclusion_manager.add_rule_to_current_profile(rule)
            self.update_exclusions_tree()
            self.notifications.show_success("Exclus√£o de arquivo adicionada!")
    
    def add_folder_exclusion(self):
        """Adiciona exclus√£o de pasta"""
        folder_path = filedialog.askdirectory(title="Selecione pasta para excluir")
        if folder_path:
            rule = ExclusionRule('folder', folder_path, f"Pasta: {os.path.basename(folder_path)}")
            self.exclusion_manager.add_rule_to_current_profile(rule)
            self.update_exclusions_tree()
            self.notifications.show_success("Exclus√£o de pasta adicionada!")
    
    def add_extension_exclusion(self):
        """Adiciona exclus√£o por extens√£o"""
        extension = simpledialog.askstring("Exclus√£o por Extens√£o", 
                                          "Digite a extens√£o (ex: .tmp, .log):")
        if extension:
            if not extension.startswith('.'):
                extension = '.' + extension
            rule = ExclusionRule('extension', extension, f"Extens√£o: {extension}")
            self.exclusion_manager.add_rule_to_current_profile(rule)
            self.update_exclusions_tree()
            self.notifications.show_success(f"Exclus√£o de extens√£o '{extension}' adicionada!")
    
    def add_regex_exclusion(self):
        """Adiciona exclus√£o por regex"""
        pattern = simpledialog.askstring("Exclus√£o por Regex", 
                                        "Digite o padr√£o regex:")
        if pattern:
            description = simpledialog.askstring("Exclus√£o por Regex", 
                                                "Descri√ß√£o (opcional):") or f"Regex: {pattern}"
            rule = ExclusionRule('regex', pattern, description)
            self.exclusion_manager.add_rule_to_current_profile(rule)
            self.update_exclusions_tree()
            self.notifications.show_success("Exclus√£o por regex adicionada!")
    
    def add_size_exclusion(self):
        """Adiciona exclus√£o por tamanho"""
        size_pattern = simpledialog.askstring("Exclus√£o por Tamanho", 
                                             "Digite o padr√£o de tamanho (ex: >10MB, <1KB):")
        if size_pattern:
            rule = ExclusionRule('size', size_pattern, f"Tamanho: {size_pattern}")
            self.exclusion_manager.add_rule_to_current_profile(rule)
            self.update_exclusions_tree()
            self.notifications.show_success("Exclus√£o por tamanho adicionada!")
    
    def preview_exclusions(self):
        """Mostra preview das exclus√µes"""
        if not self.current_directory:
            self.notifications.show_warning("Selecione um diret√≥rio primeiro!")
            return
        
        self.preview_processing()
    
    def update_exclusions_tree(self):
        """Atualiza a √°rvore de exclus√µes"""
        # Limpar √°rvore
        for item in self.exclusions_tree.get_children():
            self.exclusions_tree.delete(item)
        
        # Adicionar regras do perfil atual
        if self.exclusion_manager.current_profile:
            for rule in self.exclusion_manager.current_profile.rules:
                icon = {
                    'file': 'üìÑ',
                    'folder': 'üìÅ', 
                    'extension': 'üè∑',
                    'regex': 'üîç',
                    'size': 'üìè',
                    'date': 'üìÖ'
                }.get(rule.rule_type, '‚ùì')
                
                enabled_text = "‚úÖ" if rule.enabled else "‚ùå"
                
                self.exclusions_tree.insert('', 'end', 
                                           text=f"{icon} {rule.description or rule.pattern}", 
                                           values=(rule.rule_type.title(), rule.pattern, enabled_text))
    
    def remove_selected_exclusion(self, event=None):
        """Remove exclus√£o selecionada"""
        selection = self.exclusions_tree.selection()
        if selection and self.exclusion_manager.current_profile:
            # Obter √≠ndice da regra
            item = selection[0]
            index = self.exclusions_tree.tree.index(item)
            
            # Remover regra
            self.exclusion_manager.remove_rule_from_current_profile(index)
            self.update_exclusions_tree()
            self.notifications.show_success("Exclus√£o removida!")
    
    def edit_exclusion(self, event=None):
        """Edita exclus√£o selecionada"""
        self.notifications.show_info("Funcionalidade de edi√ß√£o em desenvolvimento")
    
    # M√©todos de resultados
    def refresh_results(self):
        """Atualiza a lista de resultados"""
        # Limpar √°rvore
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Listar arquivos do diret√≥rio de sa√≠da
        output_dir = self.config_manager.get_output_directory()
        
        try:
            for file_path in output_dir.iterdir():
                if file_path.is_file():
                    size_str = self._format_file_size(file_path.stat().st_size)
                    modified = datetime.fromtimestamp(file_path.stat().st_mtime)
                    modified_str = modified.strftime("%d/%m/%Y %H:%M")
                    
                    self.results_tree.insert('', 'end', text=f"üìÑ {file_path.name}", 
                                           values=(size_str, file_path.suffix, modified_str))
        
        except Exception as e:
            self.notifications.show_error(f"Erro ao listar resultados: {str(e)}")
    
    def search_results(self, query):
        """Busca nos resultados"""
        if not query:
            self.refresh_results()
            return
        
        # Limpar √°rvore
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Buscar arquivos que correspondem √† consulta
        output_dir = self.config_manager.get_output_directory()
        query_lower = query.lower()
        
        try:
            for file_path in output_dir.iterdir():
                if file_path.is_file() and query_lower in file_path.name.lower():
                    size_str = self._format_file_size(file_path.stat().st_size)
                    modified = datetime.fromtimestamp(file_path.stat().st_mtime)
                    modified_str = modified.strftime("%d/%m/%Y %H:%M")
                    
                    self.results_tree.insert('', 'end', text=f"üìÑ {file_path.name}", 
                                           values=(size_str, file_path.suffix, modified_str))
        
        except Exception as e:
            self.notifications.show_error(f"Erro na busca: {str(e)}")
    
    def clear_search(self):
        """Limpa a busca"""
        self.refresh_results()
    
    def open_selected_file(self):
        """Abre arquivo selecionado"""
        selection = self.results_tree.selection()
        if selection:
            item = selection[0]
            filename = self.results_tree.tree.item(item, 'text').replace('üìÑ ', '')
            file_path = self.config_manager.get_output_directory() / filename
            self.open_file(str(file_path))
    
    def view_selected_file(self):
        """Visualiza arquivo selecionado"""
        selection = self.results_tree.selection()
        if selection:
            item = selection[0]
            filename = self.results_tree.tree.item(item, 'text').replace('üìÑ ', '')
            file_path = self.config_manager.get_output_directory() / filename
            self.view_file(str(file_path))
    
    def delete_selected_file(self):
        """Exclui arquivo selecionado"""
        selection = self.results_tree.selection()
        if selection:
            item = selection[0]
            filename = self.results_tree.tree.item(item, 'text').replace('üìÑ ', '')
            
            if messagebox.askyesno("Confirmar", f"Excluir arquivo '{filename}'?"):
                try:
                    file_path = self.config_manager.get_output_directory() / filename
                    file_path.unlink()
                    self.refresh_results()
                    self.notifications.show_success("Arquivo exclu√≠do!")
                except Exception as e:
                    self.notifications.show_error(f"Erro ao excluir arquivo: {str(e)}")
    
    def export_results(self):
        """Exporta resultados em m√∫ltiplos formatos"""
        if not self.last_processing_stats:
            self.notifications.show_warning("Nenhum processamento realizado ainda!")
            return
        
        # Dialog de sele√ß√£o de formato
        dialog = tk.Toplevel(self.root)
        dialog.title("Exportar Resultados")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (dialog.winfo_screenheight() // 2) - (300 // 2)
        dialog.geometry(f"400x300+{x}+{y}")
        
        frame = ttk.Frame(dialog, style='Dark.TFrame', padding=20)
        frame.pack(fill=tk.BOTH, expand=True)
        
        label = ttk.Label(frame, text="Selecione o formato de exporta√ß√£o:", style='Dark.TLabel')
        label.pack(anchor='w', pady=(0, 10))
        
        # Op√ß√µes de formato
        format_var = tk.StringVar(value="html")
        
        formats = [
            ("HTML Interativo", "html"),
            ("JSON", "json"),
            ("XML", "xml"),
            ("Markdown", "markdown"),
            ("Relat√≥rio PDF", "pdf")
        ]
        
        for text, value in formats:
            radio = ttk.Radiobutton(frame, text=text, variable=format_var, 
                                   value=value, style='Dark.TRadiobutton')
            radio.pack(anchor='w', pady=2)
        
        # Bot√µes
        buttons_frame = ttk.Frame(frame, style='Dark.TFrame')
        buttons_frame.pack(fill=tk.X, pady=(20, 0))
        
        def export():
            format_type = format_var.get()
            dialog.destroy()
            self.perform_export(format_type)
        
        export_button = ttk.Button(buttons_frame, text="Exportar", 
                                  style='Accent.TButton', command=export)
        export_button.pack(side=tk.LEFT, padx=(0, 10))
        
        cancel_button = ttk.Button(buttons_frame, text="Cancelar", 
                                  style='Dark.TButton', command=dialog.destroy)
        cancel_button.pack(side=tk.LEFT)
    
    def perform_export(self, format_type):
        """Realiza a exporta√ß√£o no formato especificado"""
        try:
            # Preparar dados para exporta√ß√£o
            export_data = {
                "root_path": self.current_directory,
                "processing_mode": self.processing_mode.get(),
                "include_subdirectories": self.include_subdirectories.get(),
                "stats": self.last_processing_stats.to_dict() if self.last_processing_stats else {},
                "timestamp": datetime.now().isoformat()
            }
            
            # Adicionar dados da √°rvore se dispon√≠vel
            if self.current_directory_tree:
                scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
                export_data["tree_items"] = scanner.generate_tree_items_for_export(self.current_directory_tree)
            
            # Determinar nome do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if format_type == "html":
                output_path = self.config_manager.get_output_directory() / f"relatorio_{timestamp}.html"
                self.export_manager.export_directory_structure_to_html(export_data, str(output_path))
            
            elif format_type == "json":
                output_path = self.config_manager.get_output_directory() / f"dados_{timestamp}.json"
                self.export_manager.export_to_json(export_data, str(output_path))
            
            elif format_type == "xml":
                output_path = self.config_manager.get_output_directory() / f"dados_{timestamp}.xml"
                self.export_manager.export_to_xml(export_data, str(output_path))
            
            elif format_type == "markdown":
                output_path = self.config_manager.get_output_directory() / f"relatorio_{timestamp}.md"
                self.export_manager.export_to_markdown(export_data, str(output_path))
            
            else:
                self.notifications.show_warning(f"Formato '{format_type}' n√£o implementado ainda")
                return
            
            self.notifications.show_success(f"Exporta√ß√£o conclu√≠da: {output_path.name}")
            self.refresh_results()
            
            # Abrir arquivo se configurado
            if self.auto_open_results.get():
                self.open_file(str(output_path))
        
        except Exception as e:
            self.notifications.show_error(f"Erro na exporta√ß√£o: {str(e)}")
    
    def open_output_folder(self):
        """Abre pasta de sa√≠da"""
        output_dir = self.config_manager.get_output_directory()
        try:
            if os.name == 'nt':  # Windows
                os.startfile(str(output_dir))
            elif os.name == 'posix':  # Linux/Mac
                os.system(f'xdg-open "{output_dir}"')
        except Exception as e:
            self.notifications.show_error(f"Erro ao abrir pasta: {str(e)}")
    
    def open_file(self, file_path):
        """Abre arquivo no programa padr√£o"""
        try:
            if os.name == 'nt':  # Windows
                os.startfile(file_path)
            elif os.name == 'posix':  # Linux/Mac
                os.system(f'xdg-open "{file_path}"')
        except Exception as e:
            self.notifications.show_error(f"Erro ao abrir arquivo: {str(e)}")
    
    def view_file(self, file_path):
        """Visualiza arquivo em janela interna"""
        try:
            # Criar janela de visualiza√ß√£o
            viewer = tk.Toplevel(self.root)
            viewer.title(f"Visualizando: {os.path.basename(file_path)}")
            viewer.geometry("800x600")
            
            # √Årea de texto
            text_area = tk.Text(viewer, bg=DarkTheme.COLORS['bg_secondary'],
                               fg=DarkTheme.COLORS['text_primary'], 
                               font=('Courier New', 10), wrap=tk.WORD)
            
            # Scrollbar
            scrollbar = ttk.Scrollbar(viewer, orient=tk.VERTICAL, command=text_area.yview)
            text_area.configure(yscrollcommand=scrollbar.set)
            
            # Layout
            text_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # Carregar conte√∫do
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                text_area.insert('1.0', content)
            
            text_area.config(state='disabled')
        
        except Exception as e:
            self.notifications.show_error(f"Erro ao visualizar arquivo: {str(e)}")
    
    # M√©todos de an√°lises
    def update_statistics(self):
        """Atualiza estat√≠sticas na aba de an√°lises"""
        if not self.last_processing_stats:
            return
        
        # Limpar frame de estat√≠sticas
        for widget in self.stats_frame.winfo_children():
            widget.destroy()
        
        # Criar cards de estat√≠sticas
        stats = self.last_processing_stats.to_dict()
        
        stats_items = [
            ("Arquivos Processados", stats.get('processed_files', 0)),
            ("Arquivos Exclu√≠dos", stats.get('excluded_files', 0)),
            ("Diret√≥rios", stats.get('total_directories', 0)),
            ("Tamanho Total", self._format_file_size(stats.get('total_size', 0))),
            ("Dura√ß√£o", f"{stats.get('duration', 0):.1f}s"),
            ("Velocidade", f"{stats.get('processing_speed', 0):.1f} arq/s")
        ]
        
        # Organizar em grid
        for i, (label, value) in enumerate(stats_items):
            row = i // 3
            col = i % 3
            
            card_frame = DarkTheme.create_card_frame(self.stats_frame, padding=10)
            card_frame.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
            
            value_label = ttk.Label(card_frame, text=str(value), 
                                   style='Title.TLabel', anchor='center')
            value_label.pack()
            
            label_label = ttk.Label(card_frame, text=label, 
                                   style='Subtitle.TLabel', anchor='center')
            label_label.pack()
        
        # Configurar expans√£o das colunas
        for i in range(3):
            self.stats_frame.grid_columnconfigure(i, weight=1)
    
    def show_largest_files(self):
        """Mostra maiores arquivos"""
        if not self.current_directory_tree:
            self.notifications.show_warning("Execute um escaneamento primeiro!")
            return
        
        scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
        largest_files = scanner.get_largest_files(self.current_directory_tree, 20)
        
        # Limpar √°rvore de an√°lise
        for item in self.analysis_tree.get_children():
            self.analysis_tree.delete(item)
        
        # Adicionar arquivos
        for file_node in largest_files:
            size_str = self._format_file_size(file_node.size)
            rel_path = os.path.relpath(file_node.path, self.current_directory)
            
            self.analysis_tree.insert('', 'end', text=f"üìÑ {file_node.name}", 
                                     values=(size_str, file_node.extension, rel_path))
        
        self.notifications.show_info(f"Mostrando {len(largest_files)} maiores arquivos")
    
    def show_extension_distribution(self):
        """Mostra distribui√ß√£o de extens√µes"""
        if not self.current_directory_tree:
            self.notifications.show_warning("Execute um escaneamento primeiro!")
            return
        
        distribution = self.current_directory_tree.get_extension_distribution()
        
        # Limpar √°rvore de an√°lise
        for item in self.analysis_tree.get_children():
            self.analysis_tree.delete(item)
        
        # Ordenar por quantidade
        sorted_extensions = sorted(distribution.items(), key=lambda x: x[1], reverse=True)
        
        # Adicionar extens√µes
        for ext, count in sorted_extensions:
            ext_display = ext if ext else "(sem extens√£o)"
            self.analysis_tree.insert('', 'end', text=f"üè∑ {ext_display}", 
                                     values=(str(count), "arquivos", ""))
        
        self.notifications.show_info(f"Mostrando distribui√ß√£o de {len(sorted_extensions)} extens√µes")
    
    def show_duplicate_names(self):
        """Mostra nomes duplicados"""
        if not self.current_directory_tree:
            self.notifications.show_warning("Execute um escaneamento primeiro!")
            return
        
        scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
        duplicates = scanner.get_duplicate_names(self.current_directory_tree)
        
        # Limpar √°rvore de an√°lise
        for item in self.analysis_tree.get_children():
            self.analysis_tree.delete(item)
        
        # Adicionar duplicatas
        for name, nodes in duplicates.items():
            if len(nodes) > 1:
                parent_item = self.analysis_tree.insert('', 'end', text=f"üìã {name}", 
                                                       values=(str(len(nodes)), "duplicatas", ""))
                
                for node in nodes:
                    rel_path = os.path.relpath(node.path, self.current_directory)
                    icon = "üìÅ" if node.is_directory else "üìÑ"
                    self.analysis_tree.insert(parent_item, 'end', text=f"{icon} {rel_path}", 
                                            values=("", "", ""))
        
        self.notifications.show_info(f"Encontradas {len(duplicates)} duplicatas")
    
    def show_empty_directories(self):
        """Mostra diret√≥rios vazios"""
        if not self.current_directory_tree:
            self.notifications.show_warning("Execute um escaneamento primeiro!")
            return
        
        scanner = DirectoryScanner(set(self.get_supported_extensions()), self.exclusion_manager)
        empty_dirs = scanner.get_empty_directories(self.current_directory_tree)
        
        # Limpar √°rvore de an√°lise
        for item in self.analysis_tree.get_children():
            self.analysis_tree.delete(item)
        
        # Adicionar diret√≥rios vazios
        for dir_node in empty_dirs:
            rel_path = os.path.relpath(dir_node.path, self.current_directory)
            self.analysis_tree.insert('', 'end', text=f"üìÅ {dir_node.name}", 
                                     values=("0", "arquivos", rel_path))
        
        self.notifications.show_info(f"Encontrados {len(empty_dirs)} diret√≥rios vazios")
    
    # M√©todos de configura√ß√µes
    def update_extensions(self):
        """Atualiza lista de extens√µes suportadas"""
        try:
            extensions_text = self.extensions_var.get()
            extensions = [ext.strip() for ext in extensions_text.split() if ext.strip()]
            self.config_manager.set_supported_extensions(extensions)
            self.notifications.show_success("Extens√µes atualizadas!")
        except Exception as e:
            self.notifications.show_error(f"Erro ao atualizar extens√µes: {str(e)}")
    
    def export_config(self):
        """Exporta configura√ß√µes"""
        file_path = filedialog.asksaveasfilename(
            title="Exportar Configura√ß√µes",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.config_manager.export_config(file_path)
                self.notifications.show_success("Configura√ß√µes exportadas!")
            except Exception as e:
                self.notifications.show_error(f"Erro ao exportar: {str(e)}")
    
    def import_config(self):
        """Importa configura√ß√µes"""
        file_path = filedialog.askopenfilename(
            title="Importar Configura√ß√µes",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                self.config_manager.import_config(file_path)
                self.load_settings()  # Recarregar interface
                self.notifications.show_success("Configura√ß√µes importadas!")
            except Exception as e:
                self.notifications.show_error(f"Erro ao importar: {str(e)}")
    
    def reset_to_defaults(self):
        """Restaura configura√ß√µes padr√£o"""
        if messagebox.askyesno("Confirmar", "Restaurar todas as configura√ß√µes para os padr√µes?"):
            self.config_manager.reset_to_defaults()
            self.load_settings()  # Recarregar interface
            self.notifications.show_success("Configura√ß√µes restauradas!")
    
    def cleanup_cache(self):
        """Limpa cache e arquivos tempor√°rios"""
        try:
            self.config_manager.cleanup_old_files()
            self.notifications.show_success("Cache limpo!")
        except Exception as e:
            self.notifications.show_error(f"Erro ao limpar cache: {str(e)}")
    
    # M√©todos auxiliares
    def show_help(self):
        """Mostra ajuda"""
        help_text = """UltraTexto Pro - Ajuda

FUNCIONALIDADES PRINCIPAIS:
‚Ä¢ Processamento de arquivos de c√≥digo
‚Ä¢ Sistema avan√ßado de exclus√µes
‚Ä¢ Gera√ß√£o de estruturas de diret√≥rio
‚Ä¢ Exporta√ß√£o em m√∫ltiplos formatos
‚Ä¢ An√°lises estat√≠sticas detalhadas

COMO USAR:
1. Selecione um diret√≥rio
2. Configure exclus√µes se necess√°rio
3. Escolha o modo de processamento
4. Clique em "Processar"

ATALHOS:
‚Ä¢ Ctrl+P: Processar
‚Ä¢ Ctrl+O: Selecionar diret√≥rio
‚Ä¢ Ctrl+R: Abrir resultados
‚Ä¢ Ctrl+F: Buscar
‚Ä¢ Ctrl+,: Configura√ß√µes

Para mais informa√ß√µes, consulte a documenta√ß√£o."""
        
        messagebox.showinfo("Ajuda - UltraTexto Pro", help_text)
    
    def show_about(self):
        """Mostra informa√ß√µes sobre o programa"""
        about_text = """UltraTexto Pro v2.0

Ferramenta avan√ßada para processamento e an√°lise de arquivos de c√≥digo.

Desenvolvido com:
‚Ä¢ Python 3.8+
‚Ä¢ tkinter (interface gr√°fica)
‚Ä¢ Tema escuro moderno

Recursos:
‚Ä¢ Interface moderna e intuitiva
‚Ä¢ Processamento eficiente de arquivos
‚Ä¢ Sistema avan√ßado de exclus√µes
‚Ä¢ M√∫ltiplos formatos de exporta√ß√£o
‚Ä¢ An√°lises estat√≠sticas detalhadas

¬© 2024 UltraTexto Pro Team"""
        
        messagebox.showinfo("Sobre - UltraTexto Pro", about_text)
    
    def update_exclusions_summary(self):
        """Atualiza o resumo das exclus√µes ativas na interface"""
        try:
            summary = self.exclusion_manager.get_exclusion_summary()
            
            if "error" in summary:
                self.profile_info_label.config(text="Erro: Nenhum perfil ativo")
                self.rules_info_label.config(text="Regras: 0 ativas")
                self.common_exclusions_label.config(text="Pastas exclu√≠das: N/A")
                return
            
            # Atualizar informa√ß√µes do perfil
            self.profile_info_label.config(text=f"Perfil: {summary['profile_name']}")
            self.rules_info_label.config(text=f"Regras: {summary['enabled_rules']} ativas")
            
            # Mostrar pastas comuns exclu√≠das
            common_exclusions = summary.get('common_exclusions', [])
            if common_exclusions:
                # Limitar a 5 pastas para n√£o sobrecarregar a interface
                display_exclusions = common_exclusions[:5]
                if len(common_exclusions) > 5:
                    display_exclusions.append("...")
                self.common_exclusions_label.config(text=f"Pastas exclu√≠das: {', '.join(display_exclusions)}")
            else:
                self.common_exclusions_label.config(text="Pastas exclu√≠das: Nenhuma")
                
        except Exception as e:
            self.profile_info_label.config(text="Erro ao carregar resumo")
            self.rules_info_label.config(text="Regras: Erro")
            self.common_exclusions_label.config(text="Pastas exclu√≠das: Erro")
            print(f"Erro ao atualizar resumo das exclus√µes: {e}")
    
    def _format_file_size(self, size_bytes):
        """Formata tamanho do arquivo"""
        if size_bytes == 0:
            return "0 B"
        
        units = ["B", "KB", "MB", "GB", "TB"]
        unit_index = 0
        size = float(size_bytes)
        
        while size >= 1024 and unit_index < len(units) - 1:
            size /= 1024
            unit_index += 1
        
        if unit_index == 0:
            return f"{int(size)} {units[unit_index]}"
        else:
            return f"{size:.1f} {units[unit_index]}"
    
    def on_closing(self):
        """Chamado ao fechar a aplica√ß√£o"""
        # Salvar configura√ß√µes
        self.save_settings()
        
        # Fechar aplica√ß√£o
        self.root.destroy()
    
    def run(self):
        """Executa a aplica√ß√£o"""
        # Carregar resultados iniciais
        self.refresh_results()
        
        # Iniciar loop principal
        self.root.mainloop()
    
    def clone_directory_action(self):
        """A√ß√£o para clonar diret√≥rio com exclus√µes"""
        source_dir = filedialog.askdirectory(title="Selecione a pasta de origem para clonar")
        if not source_dir:
            return
        dest_dir = filedialog.askdirectory(title="Selecione a pasta de destino para clonagem")
        if not dest_dir:
            return
        include_subdirs = self.include_subdirectories.get()
        scanner = DirectoryScanner(self.get_supported_extensions(), self.exclusion_manager)
        try:
            self.status_bar.set_status("Clonando diret√≥rio...")
            total = scanner.clone_directory_with_exclusions(source_dir, dest_dir, include_subdirectories=include_subdirs)
            self.notifications.show_info(f"Clonagem conclu√≠da! {total} itens copiados.")
            self.status_bar.set_status(f"Clonagem conclu√≠da: {total} itens copiados.")
        except Exception as e:
            self.notifications.show_error(f"Erro ao clonar diret√≥rio: {e}")
            self.status_bar.set_status("Erro na clonagem.")

def main():
    """Fun√ß√£o principal"""
    app = UltraTextoPro()
    app.run()

if __name__ == "__main__":
    main()

